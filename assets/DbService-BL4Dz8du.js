const S="storyverse-db";const d="stories_cache",b="outbox-stories",u="deleted-story-ids",i="saved-stories",w={_db:null,async _openDb(){return this._db?this._db:new Promise((s,a)=>{const n=indexedDB.open(S,12);n.onerror=o=>{console.error("[DB] Error opening DB:",o.target.error),a(new Error("Gagal membuka IndexedDB"))},n.onsuccess=o=>{this._db=o.target.result,s(this._db)},n.onupgradeneeded=o=>{const t=o.target.result;t.objectStoreNames.contains(d)||t.createObjectStore(d,{keyPath:"id"}),t.objectStoreNames.contains(b)||t.createObjectStore(b,{keyPath:"tempId",autoIncrement:!0}),t.objectStoreNames.contains(u)||t.createObjectStore(u,{keyPath:"id"}),t.objectStoreNames.contains(i)||t.createObjectStore(i,{keyPath:"id"})}})},async putStories(s){if(!Array.isArray(s)||s.length===0)return;const o=(await this._openDb()).transaction(d,"readwrite").objectStore(d);await Promise.all(s.map(t=>t!=null&&t.id?new Promise(e=>{const r=o.put(t);r.onsuccess=()=>e(),r.onerror=()=>e()}):Promise.resolve()))},async getAllStories(){const n=(await this._openDb()).transaction(d,"readonly").objectStore(d);return new Promise((o,t)=>{const e=n.getAll();e.onsuccess=()=>o(e.result||[]),e.onerror=r=>t(r.target.error)})},async deleteStory(s){const o=(await this._openDb()).transaction(d,"readwrite").objectStore(d);return new Promise((t,e)=>{const r=o.delete(s);r.onsuccess=()=>t(),r.onerror=c=>e(c.target.error)})},async clearAllStories(){const n=(await this._openDb()).transaction(d,"readwrite").objectStore(d);return new Promise((o,t)=>{const e=n.clear();e.onsuccess=()=>o(),e.onerror=r=>t(r.target.error)})},async markStoryAsDeleted(s){if(!s)return;const o=(await this._openDb()).transaction(u,"readwrite").objectStore(u);return new Promise((t,e)=>{const r=o.put({id:s});r.onsuccess=()=>t(),r.onerror=c=>e(c.target.error)})},async getDeletedStoryIds(){const n=(await this._openDb()).transaction(u,"readonly").objectStore(u);return new Promise((o,t)=>{const e=n.getAll();e.onsuccess=()=>{const r=(e.result||[]).map(c=>c.id).filter(Boolean);o(r)},e.onerror=r=>t(r.target.error)})},async addStoryToOutbox(s){const o=(await this._openDb()).transaction(b,"readwrite").objectStore(b);return new Promise((t,e)=>{const r={...s,tempId:s.tempId||`temp-${Date.now()}-${Math.random()}`},c=o.put(r);c.onsuccess=()=>t(r.tempId),c.onerror=l=>e(l.target.error)})},async getAllOutboxStories(){const n=(await this._openDb()).transaction(b,"readonly").objectStore(b);return new Promise((o,t)=>{const e=n.getAll();e.onsuccess=()=>o(e.result||[]),e.onerror=r=>t(r.target.error)})},async deleteStoryFromOutbox(s){const o=(await this._openDb()).transaction(b,"readwrite").objectStore(b);return new Promise((t,e)=>{const r=o.delete(s);r.onsuccess=()=>t(),r.onerror=c=>e(c.target.error)})},async saveStoryToSaved(s){const o=(await this._openDb()).transaction(i,"readwrite").objectStore(i);return new Promise((t,e)=>{const r=o.put(s);r.onsuccess=()=>t(),r.onerror=c=>e(c.target.error)})},async getAllSavedStories(){const n=(await this._openDb()).transaction(i,"readonly").objectStore(i);return new Promise((o,t)=>{const e=n.getAll();e.onsuccess=()=>o(e.result||[]),e.onerror=r=>t(r.target.error)})},async deleteSavedStory(s){const o=(await this._openDb()).transaction(i,"readwrite").objectStore(i);return new Promise((t,e)=>{const r=o.delete(s);r.onsuccess=()=>t(),r.onerror=c=>e(c.target.error)})},async isStorySaved(s){const o=(await this._openDb()).transaction(i,"readonly").objectStore(i);return new Promise((t,e)=>{const r=o.get(s);r.onsuccess=()=>t(!!r.result),r.onerror=c=>e(c.target.error)})},async clearSavedStories(){const n=(await this._openDb()).transaction(i,"readwrite").objectStore(i);return new Promise((o,t)=>{const e=n.clear();e.onsuccess=()=>o(),e.onerror=r=>t(r.target.error)})}};export{w as default};
